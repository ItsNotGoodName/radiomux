/* eslint-disable */
// radiomux v0.1.0 c20347146abbdc79d09f168e4b393775e531e8c9
// --
// Code generated by webrpc-gen@v0.13.1 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=./shared/api.ridl -target=typescript -client -out=./web/src/api/client.gen.ts

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.1.0"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "c20347146abbdc79d09f168e4b393775e531e8c9"

//
// Types
//


export enum StateAction {
  PLAY = 'PLAY',
  PUASE = 'PUASE',
  STOP = 'STOP',
  SEEK = 'SEEK'
}

export type Player = {
  id: number
  name: string
  token: string
}

export type CreatePlayer = {
  id: number
  name: string
}

export type UpdatePlayer = {
  id: number
  name?: string
}

export type PlayerListResult = {
  players: Array<Player>
  count: number
}

export type Preset = {
  id: number
  name: string
  url: string
}

export type CreatePreset = {
  id: number
  name: string
}

export type UpdatePreset = {
  id: number
  name?: string
  url?: string
}

export type SetStateAction = {
  id: number
  action: StateAction
}

export type SetStateVolume = {
  id: number
  volume?: number
  delta?: number
  mute?: boolean
}

export type SetStateMedia = {
  id: number
  presetId?: number
  uri?: string
}

export interface PlayerService {
  playerCreate(args: PlayerCreateArgs, headers?: object, signal?: AbortSignal): Promise<PlayerCreateReturn>
  playerGet(args: PlayerGetArgs, headers?: object, signal?: AbortSignal): Promise<PlayerGetReturn>
  playerList(headers?: object, signal?: AbortSignal): Promise<PlayerListReturn>
  playerUpdate(args: PlayerUpdateArgs, headers?: object, signal?: AbortSignal): Promise<PlayerUpdateReturn>
  playerTokenRegenerate(args: PlayerTokenRegenerateArgs, headers?: object, signal?: AbortSignal): Promise<PlayerTokenRegenerateReturn>
  playerWsURL(args: PlayerWsURLArgs, headers?: object, signal?: AbortSignal): Promise<PlayerWsURLReturn>
  playerDelete(args: PlayerDeleteArgs, headers?: object, signal?: AbortSignal): Promise<PlayerDeleteReturn>
}

export type PlayerCreateArgs = {
  req: CreatePlayer
}

export type PlayerCreateReturn = {
  id: number  
}
export type PlayerGetArgs = {
  id: number
}

export type PlayerGetReturn = {
  player: Player  
}
export type PlayerListArgs = {
}

export type PlayerListReturn = {
  res: PlayerListResult  
}
export type PlayerUpdateArgs = {
  req: UpdatePlayer
}

export type PlayerUpdateReturn = {  
}
export type PlayerTokenRegenerateArgs = {
  id: number
}

export type PlayerTokenRegenerateReturn = {  
}
export type PlayerWsURLArgs = {
  id: number
}

export type PlayerWsURLReturn = {
  url: string  
}
export type PlayerDeleteArgs = {
  ids: Array<number>
}

export type PlayerDeleteReturn = {  
}

export interface PresetService {
  presetCreate(args: PresetCreateArgs, headers?: object, signal?: AbortSignal): Promise<PresetCreateReturn>
  presetGet(args: PresetGetArgs, headers?: object, signal?: AbortSignal): Promise<PresetGetReturn>
  presetList(headers?: object, signal?: AbortSignal): Promise<PresetListReturn>
  presetUpdate(args: PresetUpdateArgs, headers?: object, signal?: AbortSignal): Promise<PresetUpdateReturn>
  presetDelete(args: PresetDeleteArgs, headers?: object, signal?: AbortSignal): Promise<PresetDeleteReturn>
}

export type PresetCreateArgs = {
  req: CreatePreset
}

export type PresetCreateReturn = {
  id: number  
}
export type PresetGetArgs = {
  id: number
}

export type PresetGetReturn = {
  preset: Preset  
}
export type PresetListArgs = {
}

export type PresetListReturn = {
  presets: Array<Preset>  
}
export type PresetUpdateArgs = {
  req: UpdatePreset
}

export type PresetUpdateReturn = {  
}
export type PresetDeleteArgs = {
  ids: Array<number>
}

export type PresetDeleteReturn = {  
}

export interface StateService {
  stateActionSet(args: StateActionSetArgs, headers?: object, signal?: AbortSignal): Promise<StateActionSetReturn>
  stateVolumeSet(args: StateVolumeSetArgs, headers?: object, signal?: AbortSignal): Promise<StateVolumeSetReturn>
  stateMediaSet(args: StateMediaSetArgs, headers?: object, signal?: AbortSignal): Promise<StateMediaSetReturn>
}

export type StateActionSetArgs = {
  req: SetStateAction
}

export type StateActionSetReturn = {  
}
export type StateVolumeSetArgs = {
  req: SetStateVolume
}

export type StateVolumeSetReturn = {  
}
export type StateMediaSetArgs = {
  req: SetStateMedia
}

export type StateMediaSetReturn = {  
}


  
//
// Client
//
export class PlayerService implements PlayerService {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/PlayerService/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  playerCreate = (args: PlayerCreateArgs, headers?: object, signal?: AbortSignal): Promise<PlayerCreateReturn> => {
    return this.fetch(
      this.url('PlayerCreate'),
      createHTTPRequest(args, headers, signal)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          id: <number>(_data.id),
        }
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  playerGet = (args: PlayerGetArgs, headers?: object, signal?: AbortSignal): Promise<PlayerGetReturn> => {
    return this.fetch(
      this.url('PlayerGet'),
      createHTTPRequest(args, headers, signal)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          player: <Player>(_data.player),
        }
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  playerList = (headers?: object, signal?: AbortSignal): Promise<PlayerListReturn> => {
    return this.fetch(
      this.url('PlayerList'),
      createHTTPRequest({}, headers, signal)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          res: <PlayerListResult>(_data.res),
        }
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  playerUpdate = (args: PlayerUpdateArgs, headers?: object, signal?: AbortSignal): Promise<PlayerUpdateReturn> => {
    return this.fetch(
      this.url('PlayerUpdate'),
      createHTTPRequest(args, headers, signal)).then((res) => {
      return buildResponse(res).then(_data => {
        return {}
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  playerTokenRegenerate = (args: PlayerTokenRegenerateArgs, headers?: object, signal?: AbortSignal): Promise<PlayerTokenRegenerateReturn> => {
    return this.fetch(
      this.url('PlayerTokenRegenerate'),
      createHTTPRequest(args, headers, signal)).then((res) => {
      return buildResponse(res).then(_data => {
        return {}
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  playerWsURL = (args: PlayerWsURLArgs, headers?: object, signal?: AbortSignal): Promise<PlayerWsURLReturn> => {
    return this.fetch(
      this.url('PlayerWsURL'),
      createHTTPRequest(args, headers, signal)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          url: <string>(_data.url),
        }
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  playerDelete = (args: PlayerDeleteArgs, headers?: object, signal?: AbortSignal): Promise<PlayerDeleteReturn> => {
    return this.fetch(
      this.url('PlayerDelete'),
      createHTTPRequest(args, headers, signal)).then((res) => {
      return buildResponse(res).then(_data => {
        return {}
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
}

export class PresetService implements PresetService {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/PresetService/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  presetCreate = (args: PresetCreateArgs, headers?: object, signal?: AbortSignal): Promise<PresetCreateReturn> => {
    return this.fetch(
      this.url('PresetCreate'),
      createHTTPRequest(args, headers, signal)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          id: <number>(_data.id),
        }
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  presetGet = (args: PresetGetArgs, headers?: object, signal?: AbortSignal): Promise<PresetGetReturn> => {
    return this.fetch(
      this.url('PresetGet'),
      createHTTPRequest(args, headers, signal)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          preset: <Preset>(_data.preset),
        }
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  presetList = (headers?: object, signal?: AbortSignal): Promise<PresetListReturn> => {
    return this.fetch(
      this.url('PresetList'),
      createHTTPRequest({}, headers, signal)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          presets: <Array<Preset>>(_data.presets),
        }
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  presetUpdate = (args: PresetUpdateArgs, headers?: object, signal?: AbortSignal): Promise<PresetUpdateReturn> => {
    return this.fetch(
      this.url('PresetUpdate'),
      createHTTPRequest(args, headers, signal)).then((res) => {
      return buildResponse(res).then(_data => {
        return {}
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  presetDelete = (args: PresetDeleteArgs, headers?: object, signal?: AbortSignal): Promise<PresetDeleteReturn> => {
    return this.fetch(
      this.url('PresetDelete'),
      createHTTPRequest(args, headers, signal)).then((res) => {
      return buildResponse(res).then(_data => {
        return {}
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
}

export class StateService implements StateService {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/StateService/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  stateActionSet = (args: StateActionSetArgs, headers?: object, signal?: AbortSignal): Promise<StateActionSetReturn> => {
    return this.fetch(
      this.url('StateActionSet'),
      createHTTPRequest(args, headers, signal)).then((res) => {
      return buildResponse(res).then(_data => {
        return {}
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  stateVolumeSet = (args: StateVolumeSetArgs, headers?: object, signal?: AbortSignal): Promise<StateVolumeSetReturn> => {
    return this.fetch(
      this.url('StateVolumeSet'),
      createHTTPRequest(args, headers, signal)).then((res) => {
      return buildResponse(res).then(_data => {
        return {}
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  stateMediaSet = (args: StateMediaSetArgs, headers?: object, signal?: AbortSignal): Promise<StateMediaSetReturn> => {
    return this.fetch(
      this.url('StateMediaSet'),
      createHTTPRequest(args, headers, signal)).then((res) => {
      return buildResponse(res).then(_data => {
        return {}
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
}

  const createHTTPRequest = (body: object = {}, headers: object = {}, signal: AbortSignal | null = null): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {}),
    signal
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(error) {
      let message = ''
      if (error instanceof Error)  {
        message = error.message
      }
      throw WebrpcBadResponseError.new({
        status: res.status,
        cause: `JSON.parse(): ${message}: response text: ${text}`},
      )
    }
    if (!res.ok) {
      const code: number = (typeof data.code === 'number') ? data.code : 0
      throw (webrpcErrorByCode[code] || WebrpcError).new(data)
    }
    return data
  })
}

//
// Errors
//

export class WebrpcError extends Error {
  name: string
  code: number
  message: string
  status: number
  cause?: string

  /** @deprecated Use message instead of msg. Deprecated in webrpc v0.11.0. */
  msg: string

  constructor(name: string, code: number, message: string, status: number, cause?: string) {
    super(message)
    this.name = name || 'WebrpcError'
    this.code = typeof code === 'number' ? code : 0
    this.message = message || `endpoint error ${this.code}`
    this.msg = this.message
    this.status = typeof status === 'number' ? status : 0
    this.cause = cause
    Object.setPrototypeOf(this, WebrpcError.prototype)
  }

  static new(payload: any): WebrpcError {
    return new this(payload.error, payload.code, payload.message || payload.msg, payload.status, payload.cause)
  }
}

// Webrpc errors

export class WebrpcEndpointError extends WebrpcError {
  constructor(
    name: string = 'WebrpcEndpoint',
    code: number = 0,
    message: string = 'endpoint error',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcEndpointError.prototype)
  }
}

export class WebrpcRequestFailedError extends WebrpcError {
  constructor(
    name: string = 'WebrpcRequestFailed',
    code: number = -1,
    message: string = 'request failed',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcRequestFailedError.prototype)
  }
}

export class WebrpcBadRouteError extends WebrpcError {
  constructor(
    name: string = 'WebrpcBadRoute',
    code: number = -2,
    message: string = 'bad route',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcBadRouteError.prototype)
  }
}

export class WebrpcBadMethodError extends WebrpcError {
  constructor(
    name: string = 'WebrpcBadMethod',
    code: number = -3,
    message: string = 'bad method',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcBadMethodError.prototype)
  }
}

export class WebrpcBadRequestError extends WebrpcError {
  constructor(
    name: string = 'WebrpcBadRequest',
    code: number = -4,
    message: string = 'bad request',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcBadRequestError.prototype)
  }
}

export class WebrpcBadResponseError extends WebrpcError {
  constructor(
    name: string = 'WebrpcBadResponse',
    code: number = -5,
    message: string = 'bad response',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcBadResponseError.prototype)
  }
}

export class WebrpcServerPanicError extends WebrpcError {
  constructor(
    name: string = 'WebrpcServerPanic',
    code: number = -6,
    message: string = 'server panic',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcServerPanicError.prototype)
  }
}

export class WebrpcInternalErrorError extends WebrpcError {
  constructor(
    name: string = 'WebrpcInternalError',
    code: number = -7,
    message: string = 'internal error',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcInternalErrorError.prototype)
  }
}


// Schema errors

export class NotFoundError extends WebrpcError {
  constructor(
    name: string = 'NotFound',
    code: number = 100,
    message: string = 'not found',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, NotFoundError.prototype)
  }
}


export enum errors {
  WebrpcEndpoint = 'WebrpcEndpoint',
  WebrpcRequestFailed = 'WebrpcRequestFailed',
  WebrpcBadRoute = 'WebrpcBadRoute',
  WebrpcBadMethod = 'WebrpcBadMethod',
  WebrpcBadRequest = 'WebrpcBadRequest',
  WebrpcBadResponse = 'WebrpcBadResponse',
  WebrpcServerPanic = 'WebrpcServerPanic',
  WebrpcInternalError = 'WebrpcInternalError',
  NotFound = 'NotFound',
}

const webrpcErrorByCode: { [code: number]: any } = {
  [0]: WebrpcEndpointError,
  [-1]: WebrpcRequestFailedError,
  [-2]: WebrpcBadRouteError,
  [-3]: WebrpcBadMethodError,
  [-4]: WebrpcBadRequestError,
  [-5]: WebrpcBadResponseError,
  [-6]: WebrpcServerPanicError,
  [-7]: WebrpcInternalErrorError,
  [100]: NotFoundError,
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
